package game.shellda;

import java.util.Random;

public class NameGenerator {

	double[][] probAfter =
		{
				   /*A,      B,      C,      D,      E,      F,      G,      H,      I,      J,      K,      L,      M,      N,      O,      P,      Q,      R,      S,      T,      U,      V,      W,      X,      Y,      Z*/
/* Prob. after A */ {00.044, 05.064, 06.912, 03.725, 02.608, 00.938, 03.052, 00.418, 01.846, 00.058, 01.041, 14.568, 04.195, 16.210, 00.167, 04.023, 00.143, 10.176, 05.171, 14.195, 02.033, 01.198, 00.575, 00.415, 00.695, 00.526},										
/* Prob. after B */ {14.682, 02.327, 00.740, 00.717, 15.060, 00.209, 00.161, 00.321, 13.580, 00.299, 00.022, 17.794, 00.467, 00.134, 10.468, 00.422, 00.022, 11.514, 01.397, 00.665, 07.700, 00.205, 00.093, 00.000, 00.983, 00.015},
/* Prob. after C */ {16.729, 00.007, 01.410, 00.014, 10.216, 00.004, 00.000, 14.334, 07.048, 00.000, 03.528, 04.251, 00.038, 00.194, 20.811, 00.007, 00.050, 06.699, 00.421, 05.881, 05.188, 00.000, 00.013, 00.000, 03.112, 00.043},
/* Prob. after D */ {11.007, 00.204, 00.105, 02.021, 27.744, 00.328, 00.992, 00.408, 25.361, 00.139, 00.040, 00.729, 00.451, 01.654, 11.381, 00.133, 00.009, 07.149, 00.723, 00.155, 04.272, 00.176, 00.436, 00.000, 02.355, 00.028},
/* Prob. after E */ {05.168, 00.772, 04.474, 08.337, 02.371, 01.012, 01.006, 00.402, 01.332, 00.090, 00.182, 06.612, 03.585, 13.720, 02.318, 02.908, 00.462, 21.117, 10.833, 05.970, 02.300, 01.015, 00.608, 02.738, 00.563, 00.106},
/* Prob. after F */ {10.472, 00.046, 00.046, 00.066, 13.451, 05.256, 00.033, 00.079, 16.589, 00.026, 00.013, 12.484, 00.072, 00.105, 17.155, 00.026, 00.000, 09.432, 00.171, 02.223, 10.544, 00.007, 00.079, 00.000, 01.625, 00.000},
/* Prob. after G */ {13.966, 00.226, 00.021, 00.123, 17.649, 00.136, 02.676, 03.810, 12.536, 00.004, 00.025, 09.725, 01.414, 04.632, 08.520, 00.107, 00.000, 12.663, 00.559, 00.230, 06.482, 00.008, 00.329, 00.000, 04.127, 00.033},
/* Prob. after H */ {15.400, 00.404, 00.109, 00.095, 23.123, 00.350, 00.065, 00.109, 15.573, 00.000, 00.054, 01.780, 01.009, 01.460, 17.132, 00.166, 00.014, 03.023, 00.289, 02.513, 03.464, 00.020, 00.537, 00.000, 13.297, 00.014},
/* Prob. after I */ {07.516, 01.331, 13.060, 05.369, 01.965, 02.307, 01.968, 00.067, 00.200, 00.037, 00.914, 04.947, 03.005, 19.675, 07.785, 02.230, 00.097, 02.127, 11.182, 08.071, 00.877, 02.501, 00.032, 00.193, 00.026, 02.518},
/* Prob. after J */ {26.987, 00.042, 00.000, 00.084, 17.741, 00.000, 00.000, 00.209, 06.192, 00.000, 00.000, 00.084, 00.042, 00.126, 19.958, 00.042, 00.000, 00.293, 00.000, 00.042, 27.992, 00.000, 00.000, 00.000, 00.167, 00.000},
/* Prob. after K */ {12.784, 00.910, 00.163, 00.299, 34.017, 00.815, 00.095, 02.649, 18.734, 00.163, 00.720, 05.393, 00.706, 04.768, 05.597, 00.299, 00.000, 01.766, 02.160, 00.842, 03.084, 00.054, 01.005, 00.000, 02.962, 00.014},
/* Prob. after L */ {13.940, 00.293, 00.858, 01.325, 20.017, 00.560, 00.448, 00.105, 18.093, 00.003, 00.461, 10.787, 00.950, 00.631, 10.420, 01.181, 00.003, 00.079, 00.675, 02.218, 03.428, 00.935, 00.148, 00.003, 12.417, 00.021},
/* Prob. after M */ {22.239, 03.623, 00.063, 00.070, 19.785, 00.185, 00.021, 00.050, 19.341, 00.008, 00.026, 00.271, 02.911, 01.174, 15.400, 05.855, 00.003, 00.091, 00.316, 00.055, 04.606, 00.034, 00.068, 00.000, 03.800, 00.008},
/* Prob. after N */ {09.098, 00.290, 05.591, 06.285, 17.225, 00.998, 10.255, 00.318, 11.314, 00.242, 00.951, 00.621, 00.394, 02.071, 12.242, 00.511, 00.127, 00.486, 03.606, 12.959, 02.024, 00.638, 00.230, 00.062, 01.072, 00.391},
/* Prob. after O */ {01.267, 02.121, 05.344, 03.530, 00.954, 01.065, 04.665, 00.389, 02.467, 00.072, 00.729, 06.395, 06.823, 15.524, 02.323, 07.613, 00.134, 11.107, 06.841, 06.010, 07.706, 03.711, 01.757, 00.869, 00.302, 00.286},
/* Prob. after P */ {12.458, 00.044, 00.040, 00.008, 15.491, 00.075, 00.018, 15.215, 07.165, 00.002, 00.030, 06.448, 00.117, 00.590, 11.376, 01.901, 00.002, 16.661, 03.152, 03.589, 03.528, 00.002, 00.079, 00.000, 02.008, 00.000},
/* Prob. after Q */ {00.046, 00.000, 00.000, 00.000, 00.091, 00.000, 00.000, 00.000, 00.046, 00.000, 00.000, 00.000, 00.000, 00.000, 00.091, 00.000, 00.046, 00.046, 00.000, 00.000, 99.635, 00.000, 00.000, 00.000, 00.000, 00.000},
/* Prob. after R */ {14.913, 01.610, 03.007, 02.979, 17.368, 00.820, 01.527, 01.398, 14.802, 00.100, 01.002, 01.321, 03.838, 02.234, 12.431, 02.145, 00.091, 02.956, 03.063, 04.222, 02.656, 01.074, 00.493, 00.007, 03.883, 00.059},
/* Prob. after S */ {05.921, 00.230, 06.541, 00.159, 09.633, 00.308, 00.179, 06.366, 09.576, 00.049, 01.097, 02.188, 04.181, 01.448, 05.063, 05.951, 00.801, 00.184, 10.149, 19.285, 07.644, 00.094, 00.984, 00.000, 01.958, 00.011},
/* Prob. after T */ {10.525, 00.236, 00.847, 00.070, 21.499, 00.334, 00.108, 09.607, 21.350, 00.028, 00.038, 01.364, 00.337, 00.292, 10.266, 00.144, 00.012, 12.072, 00.650, 02.402, 03.410, 00.033, 00.699, 00.000, 03.576, 00.102},
/* Prob. after U */ {02.395, 01.263, 02.816, 01.624, 02.100, 00.379, 01.367, 00.038, 02.544, 00.038, 00.224, 09.359, 05.863, 37.203, 00.598, 02.229, 00.027, 09.257, 15.536, 04.438, 00.024, 00.299, 00.016, 00.217, 00.066, 00.080},
/* Prob. after V */ {18.107, 00.000, 00.019, 00.000, 45.838, 00.000, 00.009, 00.000, 24.611, 00.000, 00.019, 00.038, 00.000, 00.009, 09.087, 00.000, 00.000, 00.123, 00.028, 00.000, 01.744, 00.066, 00.000, 00.000, 00.302, 00.000},
/* Prob. after W */ {23.647, 00.805, 00.237, 01.149, 14.446, 00.462, 00.154, 09.947, 16.779, 00.000, 00.853, 02.084, 00.568, 03.979, 16.412, 00.343, 00.024, 04.216, 01.445, 00.663, 00.604, 00.012, 00.343, 00.000, 00.817, 00.012},
/* Prob. after X */ {18.094, 00.667, 02.225, 00.148, 12.050, 00.445, 00.148, 00.519, 29.700, 00.000, 00.037, 00.853, 00.408, 00.148, 09.714, 02.113, 00.111, 00.037, 00.222, 09.232, 02.744, 00.000, 00.445, 00.000, 09.937, 00.000},
/* Prob. after Y */ {08.022, 01.433, 07.723, 02.475, 04.733, 00.897, 02.506, 01.072, 03.702, 00.000, 00.155, 15.983, 06.135, 05.042, 06.094, 07.239, 00.041, 04.228, 10.095, 08.919, 00.949, 00.031, 01.464, 00.474, 00.031, 00.557},
/* Prob. after Z */ {18.986, 00.045, 00.114, 00.205, 41.064, 00.023, 00.045, 00.091, 09.072, 00.000, 00.091, 01.046, 00.114, 00.068, 17.462, 00.045, 00.000, 00.114, 00.091, 00.045, 01.160, 00.023, 00.205, 00.000, 05.798, 04.093}
};
	
	int averageNameLength = 6;
	
	char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};
	double[] probVowels = {20.380, 31.696, 17.383, 18.733, 6.883, 4.925};
	
	char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'};
	double[] probConsonants = {2.454, 4.6, 7, 3.665, 3.315, 10.03, 0.55, 1.36, 6.622, 4.1, 11.103, 3.173, 0.355, 9.85, 10.41, 15.1, 1.7, 3.882, 0.475, 0.256};
	
	Random m_rand;
	
	NameGenerator(){
		m_rand = new Random();
	}
	
	public int get_random_name_length() {
		return averageNameLength + (m_rand.nextInt(6) - 3);
	}
	
	public double get_random_percent() {
		return m_rand.nextDouble()*100.0;
	}
	
	public char get_vowel(double d){
		double cumul = 0;
		for(int i = 0; i < 6 ; i++){
			cumul += probVowels[i];
			if (d <= cumul){
				return vowels[i];
			}
		}
		return vowels[m_rand.nextInt(6)];
	}

	public char get_consonant(double d){
		double cumul = 0;
		for(int i = 0; i < 20 ; i++){
			cumul += probConsonants[i];
			if (d <= cumul){
				return consonants[i];
			}
		}
		return consonants[m_rand.nextInt(20)];
	}
	
	char get_next_letter(char old){
		int index = (int) old - (int) 'a';
		double d = get_random_percent();
		double cumul = 0;
		for(int i = 0; i < 26 ; i++){
			cumul += probAfter[index][i];
			if (d <= cumul){
				return (char) (i + (int) 'a');
			}
		}

		return (char) (m_rand.nextInt(26) + (int) 'a');
	}
	
	boolean is_vowel(char c){
		for(int i = 0; i < 6; i++){
			if (c == vowels[i]){
				return true;
			}
		}
		return false;
	}

	boolean is_consonant(char c){
		for(int i = 0; i < 20; i++){
			if (c == consonants[i]){
				return true;
			}
		}
		return false;
	}
	
	public String generate(){
		int size =0;
		String result = "";
		char old, next;
		int inARow = 1;
		int vowelInARow = 0;
		int consonantInARow = 0;
		while(size <= 1){
			size = get_random_name_length();
		}
		if(m_rand.nextInt(2) == 0){
			old = get_vowel(get_random_percent());
		}
		else{
			old = get_consonant(get_random_percent());
		}
		result += ""+old;
		inARow++;
		if(is_vowel(old))
			vowelInARow += 1;
		if(is_consonant(old))
			consonantInARow += 1;
		size--;
		while(size >= 0){
			if(inARow > 2){
				do{
					next = get_next_letter(old);
				}while(next == old);
				inARow = 1;
			}
			else{
				next = get_next_letter(old);
				if (next == old){
					inARow++;
				}
			}
			if (is_vowel(next)){
				vowelInARow++;
				consonantInARow = 0;
			}
			else{
				consonantInARow++;
				vowelInARow = 0;
			}
			if(vowelInARow > 2){
				do{
					next = get_next_letter(old);
				}while(is_vowel(next) == true);
				vowelInARow = 0;
				consonantInARow = 1;
			}
			else if(consonantInARow > 2){
				do{
					next = get_next_letter(old);
				}while(is_consonant(next) == true);
				consonantInARow = 0;
				vowelInARow = 1;
			}
			result +=(""+next);
			old = next;
			size--;
		}
		return result;
	}
}
